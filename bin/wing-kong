#!/usr/bin/env node
const yargs = require('yargs/yargs');
const fs = require('fs');
const { hideBin } = require('yargs/helpers');
const packageData = require('../package.json')
const { createImportMapForPackage, rewriteHTML } = require('../wing-kong.js');
const path = require('path');
yargs(hideBin(process.argv))
    .command('generate [mode]', 'create new importmap', (yargs) => {
        return yargs.positional('mode', {
            describe: 'generate modes',
            default: 'dependencies'
        })
    }, async (argv) => {
        const parts = argv.mode.split('+');
        const rootJSONLocation = require.resolve(path.join(process.cwd(), 'package.json'));
        const importMap = await createImportMapForPackage(rootJSONLocation, parts, argv.i);
        const result = JSON.stringify(importMap, null, '    ');
        if(argv.f){
          fs.writeFile(argv.f, result, {}, ()=>{
              console.log(`File "${argv.f}" written.`);
          });
        }else{
            console.log(result);
        }
    })
    .command('rewrite [mode] [file]', 'rewrite importmap script tag', (yargs) => {
        return yargs.positional('mode', {
            describe: 'generate modes',
            default: 'dependencies'
        }).positional('file', {
            describe: 'file to rewrite',
            default: 'package.json'
        });
    }, async (argv) => {
        const rootJSONLocation = require.resolve(path.join(process.cwd(), 'package.json'));
        await rewriteHTML(argv.file, rootJSONLocation, true);
    })
    .option('file', {
        alias: 'f',
        type: 'string',
        description: 'output to file'
    })
    .option('imports', {
      alias: 'i',
      type: 'string',
      description: 'import endpoint map'
    })
    .help('help')
  .parse();